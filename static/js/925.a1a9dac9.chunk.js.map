{"version":3,"file":"static/js/925.a1a9dac9.chunk.js","mappings":"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","sources":["components/TableComponent/index.js","components/TableComponent/styled.js"],"sourcesContent":["import React, { useState, useMemo, memo } from 'react';\nimport {\n  Box,\n  Skeleton,\n  Table as MuiTable,\n  TableHead,\n  TableRow,\n  TableBody,\n} from '@mui/material';\nimport {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  StyledTableRow,\n  StyledTableCell,\n  BoxTableContainer,\n  HeaderContainer,\n} from './styled';\n\nconst TableComponent = ({\n  data,\n  columns,\n  isFetching,\n  skeletonCount = 10,\n  skeletonHeight = 28,\n  headerComponent,\n\n  onClickRow,\n}) => {\n  const [columnVisibility, setColumnVisibility] = useState({});\n\n  const memoizedData = useMemo(() => data, [data]);\n  const memoizedColumns = useMemo(() => columns, [columns]);\n  const memoisedHeaderComponent = useMemo(\n    () => headerComponent,\n    [headerComponent]\n  );\n\n  const { getHeaderGroups, getRowModel, getAllColumns } = useReactTable({\n    data: memoizedData,\n    columns: memoizedColumns,\n    state: {\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const skeletons = Array.from({ length: skeletonCount }, (_, i) => i);\n\n  const columnCount = getAllColumns().length;\n\n  const noDataFound =\n    !isFetching && (!memoizedData || memoizedData.length === 0);\n\n  return (\n    <>\n      <Box paddingX=\"2rem\">\n        {memoisedHeaderComponent && (\n          <HeaderContainer>{memoisedHeaderComponent}</HeaderContainer>\n        )}\n      </Box>\n      <BoxTableContainer>\n        <MuiTable>\n          {!isFetching && (\n            <TableHead>\n              {getHeaderGroups().map(headerGroup => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => (\n                    <StyledTableCell key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </StyledTableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n          )}\n          <TableBody>\n            {!isFetching ? (\n              getRowModel().rows.map(row => (\n                <StyledTableRow key={row.id}>\n                  {row.getVisibleCells().map(cell => (\n                    <StyledTableCell\n                      onClick={() => onClickRow?.(cell, row)}\n                      key={cell.id}\n                    >\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </StyledTableCell>\n                  ))}\n                </StyledTableRow>\n              ))\n            ) : (\n              <>\n                {skeletons.map(skeleton => (\n                  <TableRow key={skeleton}>\n                    {Array.from({ length: columnCount }, (_, i) => i).map(\n                      elm => (\n                        <StyledTableCell key={elm}>\n                          <Skeleton height={skeletonHeight} />\n                        </StyledTableCell>\n                      )\n                    )}\n                  </TableRow>\n                ))}\n              </>\n            )}\n          </TableBody>\n        </MuiTable>\n      </BoxTableContainer>\n      {noDataFound && (\n        <Box my={2} textAlign=\"center\">\n          No Data Found\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default memo(TableComponent);\n","import styled from 'styled-components';\nimport {\n  Pagination,\n  styled as style,\n  TableRow,\n  Paper,\n  TableCell,\n  TextField,\n  Box,\n} from '@mui/material';\n\nexport const HeaderContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 24px 0 32px;\n`;\n\nexport const StyledTableRow = style(TableRow)`\n  &:nth-of-type(odd) {\n    background-color: transparent;\n  }\n  &:last-child td,\n  &:last-child th {\n    border: 0;\n  }\n  :hover {\n    background-color: #60677a;\n  }\n`;\n\nexport const StyledPagination = style(Pagination)`\n  display: flex;\n  justify-content: center;\n  margin-top: 2rem;\n  color: white;\n`;\nexport const StyledPaper = style(Paper)`\n  background-color: transparent;\n`;\n\nexport const StyledTableCell = style(TableCell)`\n  color: white;\n  border-bottom: none;\n`;\nexport const StyledContainer = style(TableCell)`\n  color: white;\n  border-bottom: none;\n`;\nexport const CssTextField = style(TextField)({\n  '& label.Mui-focused': {\n    color: 'white',\n  },\n  '& .MuiInput-underline:after': {\n    borderBottomColor: 'white',\n  },\n  '& .MuiInputLabel-root': {\n    color: 'white',\n  },\n  '& .MuiOutlinedInput-input': {\n    color: 'white',\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: 'white',\n    },\n    '&:hover fieldset': {\n      borderColor: 'white',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: 'white',\n    },\n  },\n});\n\nexport const BoxTableContainer = style(Box)`\n  overflow-x: auto;\n  overflow-y: scroll;\n  height: 200px;\n  padding: 0 1rem;\n`;\n\nexport const ModelContainer = styled.div`\n  max-width: 150px;\n  display: flex;\n  align-items: center;\n  gap: 16px;\n`;\n\nexport const CardImage = styled.img`\n  display: flex;\n`;\n\nexport const ModelName = styled.span`\n  display: flex;\n  color: white;\n`;\n"],"names":["TableComponent","_ref","data","columns","isFetching","_ref$skeletonCount","skeletonCount","_ref$skeletonHeight","skeletonHeight","headerComponent","onClickRow","_useState","useState","_useState2","_slicedToArray","columnVisibility","setColumnVisibility","memoizedData","useMemo","memoizedColumns","memoisedHeaderComponent","_useReactTable","useReactTable","state","onColumnVisibilityChange","getCoreRowModel","getHeaderGroups","getRowModel","getAllColumns","skeletons","Array","from","length","_","i","columnCount","noDataFound","_jsxs","_Fragment","children","_jsx","Box","paddingX","HeaderContainer","BoxTableContainer","MuiTable","TableHead","map","headerGroup","TableRow","headers","header","StyledTableCell","isPlaceholder","flexRender","column","columnDef","getContext","id","TableBody","skeleton","elm","Skeleton","height","rows","row","StyledTableRow","getVisibleCells","cell","onClick","my","textAlign","memo","styled","_templateObject","_taggedTemplateLiteral","style","_templateObject2","StyledPagination","Pagination","_templateObject3","StyledPaper","Paper","_templateObject4","TableCell","_templateObject5","StyledContainer","_templateObject6","CssTextField","TextField","color","borderBottomColor","borderColor","_templateObject7","ModelContainer","_templateObject8","CardImage","_templateObject9","ModelName","_templateObject10"],"sourceRoot":""}