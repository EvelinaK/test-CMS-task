{"version":3,"file":"static/js/964.a1792602.chunk.js","mappings":"yOA6GA,UAjGA,SAAcA,GAAmB,IAAhBC,EAAID,EAAJC,KAAMC,EAAKF,EAALE,MACfC,EAAe,CACnBC,MAAO,UACPC,KAAM,UACNC,IAAK,WAEDC,EAAoB,CACxBH,MAAO,cACPC,KAAM,aACNC,IAAK,aAGDE,EAAgB,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,KAAI,SAAAC,GAC1B,IAAMC,EAAOD,EAAKE,KAAKC,MAAM,EAAG,GAC1BC,EAAKJ,EAAKE,KAAKC,MAAM,EAAG,GAC9B,OAAAE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKL,GAAI,IACPE,KAAK,GAADI,OAAKF,EAAE,KAAAE,OAAIL,IAEnB,IAEA,OACEM,EAAAA,EAAAA,KAACC,EAAAA,EAAmB,CAACC,MAAM,MAAMC,UAAW,IAAIC,UAC9CC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CACRtB,KAAMO,EACNgB,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GACRP,SAAA,EAEFC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,kBAAgBO,GAAG,YAAYC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAGZ,SAAA,EACxDJ,EAAAA,EAAAA,KAAA,QAAMiB,OAAO,KAAKC,UAAU,UAAUC,YAAa,MACnDnB,EAAAA,EAAAA,KAAA,QAAMiB,OAAO,MAAMC,UAAU,UAAUC,YAAa,QAEtDd,EAAAA,EAAAA,MAAA,kBAAgBO,GAAG,WAAWC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAGZ,SAAA,EACvDJ,EAAAA,EAAAA,KAAA,QAAMiB,OAAO,KAAKC,UAAU,UAAUC,YAAa,MACnDnB,EAAAA,EAAAA,KAAA,QAAMiB,OAAO,MAAMC,UAAU,UAAUC,YAAa,QAEtDd,EAAAA,EAAAA,MAAA,kBAAgBO,GAAG,aAAaC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAGZ,SAAA,EACzDJ,EAAAA,EAAAA,KAAA,QAAMiB,OAAO,KAAKC,UAAU,UAAUC,YAAa,MACnDnB,EAAAA,EAAAA,KAAA,QAAMiB,OAAO,MAAMC,UAAU,UAAUC,YAAa,WAGxDnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAa,CAACC,gBAAgB,IAAIC,OAAO,+BAC1CtB,EAAAA,EAAAA,KAACuB,EAAAA,EAAK,CACJC,QAAQ,OACRC,UAAU,EACVC,SAAU,KACVJ,OAAO,4BACPK,MAAO,CACLC,KAAM,2BACNC,SAAU,OACVC,WAAY,MACZC,WAAY,WAGhB/B,EAAAA,EAAAA,KAACgC,EAAAA,EAAK,CACJP,UAAU,EACVC,SAAU,GACVJ,OAAO,4BACPK,MAAO,CACLC,KAAM,2BACNC,SAAU,OACVC,WAAY,MACZC,WAAY,WAGhB/B,EAAAA,EAAAA,KAACiC,EAAAA,EAAO,IAEPC,OAAOC,KAAKlD,GAAOO,KAAI,SAAAC,GACtB,OAAIR,EAAMQ,IAENO,EAAAA,EAAAA,KAACoC,EAAAA,EAAI,CAEHC,KAAK,WACLb,QAAS/B,EACT6C,QAAQ,IACRC,IAAK,CACHjB,OAAQpC,EAAaO,GACrB+C,YAAa,EACbZ,KAAM1C,EAAaO,IAErB6B,OAAQpC,EAAaO,GACrBmC,KAAI,OAAA7B,OAAST,EAAkBG,GAAK,OAV/BgD,EAAAA,EAAAA,OAcJ,IACT,QAIR,C","sources":["components/Chart/index.js"],"sourcesContent":["import React from 'react';\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\nimport { nanoid } from 'nanoid';\n\nfunction Chart({ data, value }) {\n  const colorsMapper = {\n    green: '#3CDC86',\n    blue: '#18A0FB',\n    red: '#ED2D95',\n  };\n  const colorsMapperChart = {\n    green: '#colorGreen',\n    blue: '#colorBlue',\n    red: '#colorRed',\n  };\n\n  const dataChart = data?.map(item => {\n    const yyyy = item.date.slice(0, 4);\n    const mm = item.date.slice(5, 7);\n    return {\n      ...item,\n      date: `${mm}/${yyyy}`,\n    };\n  });\n\n  return (\n    <ResponsiveContainer width=\"90%\" maxHeight={248}>\n      <AreaChart\n        data={dataChart}\n        margin={{\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        <defs>\n          <linearGradient id=\"colorBlue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#0F81CE\" stopOpacity={0.8} />\n            <stop offset=\"95%\" stopColor=\"#0F81CE\" stopOpacity={0} />\n          </linearGradient>\n          <linearGradient id=\"colorRed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#C52D81\" stopOpacity={0.8} />\n            <stop offset=\"95%\" stopColor=\"#C52D81\" stopOpacity={0} />\n          </linearGradient>\n          <linearGradient id=\"colorGreen\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#1BBA64\" stopOpacity={0.8} />\n            <stop offset=\"95%\" stopColor=\"#1BBA64\" stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <CartesianGrid strokeDasharray=\"0\" stroke=\"rgba(255, 255, 255, 0.04)\" />\n        <XAxis\n          dataKey=\"date\"\n          tickLine={false}\n          tickSize={16.5}\n          stroke=\"rgba(255, 255, 255, 0.12)\"\n          style={{\n            fill: 'rgba(255, 255, 255, 0.6)',\n            fontSize: '11px',\n            fontWeight: '400',\n            lineHeight: '12px',\n          }}\n        />\n        <YAxis\n          tickLine={false}\n          tickSize={21}\n          stroke=\"rgba(255, 255, 255, 0.12)\"\n          style={{\n            fill: 'rgba(255, 255, 255, 0.6)',\n            fontSize: '11px',\n            fontWeight: '400',\n            lineHeight: '12px',\n          }}\n        />\n        <Tooltip />\n\n        {Object.keys(value).map(item => {\n          if (value[item]) {\n            return (\n              <Area\n                key={nanoid()}\n                type=\"monotone\"\n                dataKey={item}\n                stackId=\"1\"\n                dot={{\n                  stroke: colorsMapper[item],\n                  strokeWidth: 2,\n                  fill: colorsMapper[item],\n                }}\n                stroke={colorsMapper[item]}\n                fill={`url(${colorsMapperChart[item]})`}\n              />\n            );\n          }\n          return null;\n        })}\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n}\n\nexport default Chart;\n"],"names":["_ref","data","value","colorsMapper","green","blue","red","colorsMapperChart","dataChart","map","item","yyyy","date","slice","mm","_objectSpread","concat","_jsx","ResponsiveContainer","width","maxHeight","children","_jsxs","AreaChart","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","tickLine","tickSize","style","fill","fontSize","fontWeight","lineHeight","YAxis","Tooltip","Object","keys","Area","type","stackId","dot","strokeWidth","nanoid"],"sourceRoot":""}